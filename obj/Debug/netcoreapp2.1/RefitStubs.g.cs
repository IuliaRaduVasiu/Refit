// <auto-generated />
using System;
using System.Net.Http;
using System.Collections.Generic;
using System.Threading.Tasks;
using Refit;

/* ******** Hey You! *********
 *
 * This is a generated file, and gets rewritten every time you build the
 * project. If you want to edit it, you need to edit the mustache template
 * in the Refit package */

#pragma warning disable
namespace Visual_Studio_Settings.RefitInternalGenerated
{
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [AttributeUsage (AttributeTargets.Class | AttributeTargets.Struct | AttributeTargets.Enum | AttributeTargets.Constructor | AttributeTargets.Method | AttributeTargets.Property | AttributeTargets.Field | AttributeTargets.Event | AttributeTargets.Interface | AttributeTargets.Delegate)]
    sealed class PreserveAttribute : Attribute
    {

        //
        // Fields
        //
        public bool AllMembers;

        public bool Conditional;
    }
}
#pragma warning restore

namespace Refit
{
    using Visual_Studio_Settings.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIRoom : IRoom
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIRoom(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task<GameInfo> IRoom.NewRoom(Room name)
        {
            var arguments = new object[] { name };
            var func = requestBuilder.BuildRestResultFuncForMethod("NewRoom", new Type[] { typeof(Room) });
            return (Task<GameInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<GameInfo> IRoom.NewRoomName(Room name)
        {
            var arguments = new object[] { name };
            var func = requestBuilder.BuildRestResultFuncForMethod("NewRoomName", new Type[] { typeof(Room) });
            return (Task<GameInfo>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IRoom.DeleteRoom(int gameId)
        {
            var arguments = new object[] { gameId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteRoom", new Type[] { typeof(int) });
            return (Task)func(Client, arguments);
        }
    }
}

namespace Refit
{
    using Visual_Studio_Settings.RefitInternalGenerated;

    /// <inheritdoc />
    [global::System.Diagnostics.CodeAnalysis.ExcludeFromCodeCoverage]
    [global::System.Diagnostics.DebuggerNonUserCode]
    [Preserve]
    [global::System.Reflection.Obfuscation(Exclude=true)]
    partial class AutoGeneratedIStory : IStory
    {
        /// <inheritdoc />
        public HttpClient Client { get; protected set; }
        readonly IRequestBuilder requestBuilder;

        /// <inheritdoc />
        public AutoGeneratedIStory(HttpClient client, IRequestBuilder requestBuilder)
        {
            Client = client;
            this.requestBuilder = requestBuilder;
        }

        /// <inheritdoc />
        Task IStory.CreateStory(Story roomId)
        {
            var arguments = new object[] { roomId };
            var func = requestBuilder.BuildRestResultFuncForMethod("CreateStory", new Type[] { typeof(Story) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IStory.ChangeStoryName(UpdateStory newStoryName)
        {
            var arguments = new object[] { newStoryName };
            var func = requestBuilder.BuildRestResultFuncForMethod("ChangeStoryName", new Type[] { typeof(UpdateStory) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IStory.DeleteStory(DeleteStory storyId)
        {
            var arguments = new object[] { storyId };
            var func = requestBuilder.BuildRestResultFuncForMethod("DeleteStory", new Type[] { typeof(DeleteStory) });
            return (Task)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StoryList> IStory.GetStoryDetails(QueryInfo roomDetails)
        {
            var arguments = new object[] { roomDetails };
            var func = requestBuilder.BuildRestResultFuncForMethod("GetStoryDetails", new Type[] { typeof(QueryInfo) });
            return (Task<StoryList>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task<StartVotingDetails> IStory.Start(StartVoting gameId)
        {
            var arguments = new object[] { gameId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Start", new Type[] { typeof(StartVoting) });
            return (Task<StartVotingDetails>)func(Client, arguments);
        }

        /// <inheritdoc />
        Task IStory.Finish(VoteEnd gameId)
        {
            var arguments = new object[] { gameId };
            var func = requestBuilder.BuildRestResultFuncForMethod("Finish", new Type[] { typeof(VoteEnd) });
            return (Task)func(Client, arguments);
        }
    }
}
